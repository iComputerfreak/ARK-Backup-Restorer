//
//  restoreBackup.swift
//  restoreBackup
//
//  Created by Jonas Frey on 10.01.18.
//  Copyright Â© 2018 Jonas Frey. All rights reserved.
//

import Foundation
import Utility


// MARK: Create the Parser

let arguments = Array(ProcessInfo.processInfo.arguments.dropFirst())
let parser = ArgumentParser(
    usage: "[options] <savegame folder> <instance> <hh:mm>",
    overview: "This tool is used to restore backup files generated by the arkmanager tool.",
    seeAlso: nil)

// MARK: Define the Arguments

let useYesterdayArgument = parser.add(option: "--yesterday", shortName: "-d", kind: Bool.self, usage: "If the backup is from yesterday")

let savegameArgument = parser.add(positional: "savegame folder", kind: String.self, usage: "Usage")
let instanceArgument = parser.add(positional: "instance", kind: String.self, usage: "Usage")
let timeArgument = parser.add(positional: "time", kind: String.self, usage: "Usage")

// MARK: Run the Parser
let parsedArguments: ArgumentParser.Result!
do {
    parsedArguments = try parser.parse(arguments)
} catch let error as ArgumentParserError {
    print(error.description)
    exit(EXIT_FAILURE)
}

// put all parsed arguments in variables
// optional return values can be parsed, because none of the positional arguments were optional
let useYesterday: Bool = parsedArguments.get(useYesterdayArgument) ?? false
let savegame: String = parsedArguments.get(savegameArgument)!
let instance: String = parsedArguments.get(instanceArgument)!
var time: String = parsedArguments.get(timeArgument)!

// Test the time
let timeRegex = "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"
if time.range(of: timeRegex, options: .regularExpression, range: nil, locale: nil) == nil {
    // Wrong format
    print("Illegal time format. Use 'hh:mm'")
    exit(EXIT_FAILURE)
}
// replace the time separator, since the backup files use '.'
time = time.replacingOccurrences(of: ":", with: ".")

// MARK: Execution
let controller = BackupController(savegameFolder: savegame, instance: instance, time: time, isYesterday: useYesterday)
controller.restoreBackup()

exit(EXIT_SUCCESS)
